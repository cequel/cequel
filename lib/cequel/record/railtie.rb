# -*- encoding : utf-8 -*-
module Cequel
  module Record
    # @private
    # @since 0.1.0
    class Railtie < Rails::Railtie
      config.cequel = Record
      config.app_generators.orm :cequel

      def self.app_name
        Rails.application.railtie_name.sub(/_application$/, '')
      end

      initializer "cequel.configure_rails" do
        config_path = Rails.root.join('config/cequel.yml').to_s

        if File.exist?(config_path)
          config = YAML.load(ERB.new(IO.read(config_path)).result)[Rails.env]
        else
          config = {host: '127.0.0.1:9042'}
        end
        if config.respond_to? :deep_symbolize_keys!
          config.deep_symbolize_keys!
        else
          config = deep_symbolize_keys(config)
        end

        config.reverse_merge!(keyspace: "#{Railtie.app_name}_#{Rails.env}")

        connection = Cequel.connect(config)

        connection.logger = Rails.logger
        Record.connection = connection
      end

      initializer "cequel.add_new_relic" do
        begin
          require 'new_relic/agent/method_tracer'
        rescue LoadError => e
          Rails.logger.debug(
            "New Relic not installed; skipping New Relic integration")
        else
          require 'cequel/metal/new_relic_instrumentation'
        end
      end

      rake_tasks do
        require "cequel/record/tasks"
      end

      generators do
        require 'cequel/record/configuration_generator'
        require 'cequel/record/record_generator'
      end

      private

      def deep_symbolize_keys(hash)
        #
        # storing arrays containing hashes DOES/HAS happen(ed) w db yamls
        # eg as generated by admins or generated by admins' chef recipes
        # which use erb and alias extensively
        #
        if hash.is_a? Hash
          noohash = {}
          hash.each_pair do |k,v|
            key = k.respond_to?(:to_sym) ? k.to_sym : k
            noohash[key] = deep_symbolize_keys(v)
          end
          noohash
        elsif hash.is_a?(Enumerable) && hash.respond_to?(:<<)
          # for arrays/deserialized sets; ok this IS yagni
          inst = hash.class.to_s.constantize.new
          hash.reduce(inst) do |new_enum, mem|
            new_enum << deep_symbolize_keys(mem)
            new_enum
          end
        else
          hash
        end
      end
    end
  end
end
